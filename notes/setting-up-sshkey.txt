Professionals and DevOps teams typically do in the real world when setting up SSH keys for Ansible or automated systems:
Most Common Setup by Pros
Feature	Common Practice
🔐 Key Type	ed25519 (modern, faster, more secure than RSA)
🧑‍💻 Passphrase	No passphrase for automation-specific keys (used only by Ansible, CI/CD, etc.)
🗄️ Key Storage	Dedicated key stored in ~/.ssh/ansible_key (not reused from personal login key)
📤 Deployment	Public key pushed to targets via ssh-copy-id or automation
🗃️ Ansible Config	Key specified in inventory or ansible.cfg
🛡️ SSH Agent	Optional — used if passphrase-protected key is required interactively
🔒 Security Practices	Key used only on secured control nodes (not copied around); optional limited-scope user on targets

Why No Passphrase on Ansible Keys?
Ansible is designed to run unattended (especially in CI/CD).
A passphrase would break automation unless you add complexity like ssh-agent or expect scripting.
Instead of passphrase, pros secure the key itself by:
  - Keeping it on a secure, limited-access control node.
  - Using it with a limited-privilege user account on targets.

🔐 When Pros Do Use a Passphrase
For personal SSH keys (not automation).
When manually managing sensitive infrastructure.
If Ansible is being run interactively on laptops/workstations, not in pipelines.

# 1. Generate a dedicated, no-passphrase key
ssh-keygen -t ed25519 -f ~/.ssh/ansible_key -C "ansible@control-node"  # Leave passphrase blank

# 2. Copy it to the target
ssh-copy-id -i ~/.ssh/ansible_key.pub user@target_ip

# 3. Test login
ssh -i ~/.ssh/ansible_key user@target_ip

# 4. Add to Ansible inventory or config
# Example: in inventory
[target_servers]
192.168.1.100 ansible_user=user ansible_ssh_private_key_file=~/.ssh/ansible_key
